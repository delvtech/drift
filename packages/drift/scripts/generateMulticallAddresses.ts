import assert from "node:assert";
import { writeFileSync } from "node:fs";
import { relative } from "node:path";
import manifest from "../package.json";

// Settings //

const deploymentsUrl =
  "https://raw.githubusercontent.com/mds1/multicall/main/deployments.json";
const outPath = "src/constants/multicall.ts";
const exportName = "MULTICALL_ADDRESSES";

// Relative paths (for logging and final doc comment)
const cwd = process.cwd();
const relativeScriptPath = relative(cwd, import.meta.filename);

console.log(`+
|  ${manifest.name} - ${relativeScriptPath}
|
|  Generating multicall deployment addresses by chain id...
|
|  JSON source: ${deploymentsUrl}
|  Output path: ${outPath}
+`);

const deploymentsJson = await fetch(deploymentsUrl).then<DeploymentsJson>(
  (res) => res.json(),
);
assert(
  Array.isArray(deploymentsJson),
  `Expected deployments JSON to be an array, got: ${typeof deploymentsJson}`,
);

// Manual lookup
const manualLookup: ManualLookup = {
  1029: "cfx:acevn2d3dr6vh4jca28c6cmvkktsg7r8n25vp9hnmw", // Conflux Core Space Mainnet
  2020: "0xca11bde05977b3631167028862be2a173976ca11", //Ronin Mainnet
  2021: "0xca11bde05977b3631167028862be2a173976ca11", // Ronin Saigon Testnet
  728126428: "TEazPvZwDjDtFeJupyo7QunvnrnUjPH8ED", // Tron
};

const deploymentsByChainId = deploymentsJson.reduce(
  (acc, { chainId, name, url }) => {
    name = name.trim();
    if (acc[chainId]) {
      console.warn(
        `Duplicate chainId found: ${chainId} (${acc[chainId].name}, ${name}). Using the first occurrence.`,
      );
      // Concatenate names of duplicate chainIds
      acc[chainId].name += `, ${name}`;
      return acc;
    }
    const address = url.match(/0x[0-9a-f]+/i)?.[0] || manualLookup[chainId];
    if (!address) {
      console.warn(
        `Unable to parse address for chain ${name} (${chainId}) from URL: ${url}`,
      );
      return acc;
    }
    acc[chainId] = { name, address };
    return acc;
  },
  {} as DeploymentsByChainId,
);

const ts = `/* eslint-disable */

// This file was generated using the deployments JSON from the mds1/multicall repo.
// See https://github.com/mds1/multicall for more information.
//
// Changes to this file will be lost when the code is regenerated.
// Generated by: ${relativeScriptPath}

export const ${exportName} = {
${Object.entries(deploymentsByChainId)
  .map(([chainId, { address, name }]) => {
    return `  ${chainId}: "${address}", // ${name}`;
  })
  .join("\n")}
} as const;
`;

writeFileSync(outPath, ts, "utf8");
console.log(`âœ… Generated at: ${outPath}`);

// Types //

type DeploymentsJson = {
  name: string;
  chainId: number;
  url: string;
}[];

type ManualLookup = {
  [chainId: number]: string;
};

type DeploymentsByChainId = {
  [chainId: number]: {
    name: string;
    address: string;
  };
};
